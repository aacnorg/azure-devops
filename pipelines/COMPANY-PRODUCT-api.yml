trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    include:
    - src/*

pr:
  branches:
    exclude:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: appcsEnvironmentVariable
    type: string 
    default: "AZURE_APP_CONFIGURATION_CONNECTION"
  - name: appcsConnection
    type: string 
    default: "${{ variables.appcsConnection}}" # from secrets (library)
  - name: subscriptionService
    type: string 
    default: "AZURE_DEVOPS_SERVICE_CONNECTION"
  - name: appSettings
    type: object
    default: 
      - name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
        value: '$(appiKey)'
        slotSetting: false
      - name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
        value: '$(appiConnection)'
        slotSetting: false        
      - name: 'ASPNETCORE_ENVIRONMENT'
        value: '$(rgEnvironment)'
        slotSetting: false
      - name: '$(appcsEnvironmentVariable)'
        value: '$(appcsConnection)'
        slotSetting: false

variables:
  - template: ../variables/common.yml

stages:
  - stage: development
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
    variables:
      - template: ../variables/development.yml
      
    jobs:    
- job: build_api
        steps:
          - template: ../steps/dotnet-build-steps.yml
            parameters:
              artifactsPath: '${{ variables.artifactsPath}}'
              srcPath: '${{ variables.srcPath}}'

      - job: test_api
        dependsOn: build_api
        steps:
          - template: ../steps/dotnet-test-steps.yml
            parameters:
              testPath: '${{ variables.srcPath}}'
              appcsEnvironmentVariable: '${{ variables.appcsEnvironmentVariable}}'
              appcsConnection: '${{ variables.appcsConnection}}'
              rgEnvironment: '${{ variables.rgEnvironment}}'

      - job: settings_api
        dependsOn: test_api
        steps:
          - template: ../steps/api-settings-steps.yml
            parameters:
              subscriptionService: '${{ parameters.subscriptionService}}'
              rgEnvironment: '${{ variables.rgEnvironment}}'
              apiName: '${{ variables.apiName}}'
              appSettings: '${{ parameters.appSettings }}'

      - job: deploy_api
        dependsOn: settings_api
        steps:
          - template: ../steps/api-deploy-steps.yml
            parameters:              
              artifactsPath: '${{ variables.artifactsPath}}'
              archiveFile: '${{ variables.archiveFile}}'
              apiName: '${{ variables.apiName}}'
              subscriptionId: '${{ variables.subscriptionId}}'
              subscriptionService: '${{ parameters.subscriptionService}}'

  - stage: production
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    variables:
      - template: ../variables/production.yml    

    jobs:    
      - job: build_api
        steps:
          - template: ../steps/dotnet-build-steps.yml
            parameters:
              artifactsPath: '${{ variables.artifactsPath}}'
              srcPath: '${{ variables.srcPath}}'

      - job: test_api
        dependsOn: build_api
        steps:
          - template: ../steps/dotnet-test-steps.yml
            parameters:
              testPath: '${{ variables.srcPath}}'
              appcsEnvironmentVariable: '${{ variables.appcsEnvironmentVariable}}'
              appcsConnection: '${{ variables.appcsConnection}}'
              rgEnvironment: '${{ variables.rgEnvironment}}'

      - job: settings_api
        dependsOn: test_api
        steps:
          - template: ../steps/api-settings-steps.yml
            parameters:
              subscriptionService: '${{ parameters.subscriptionService}}'
              rgEnvironment: '${{ variables.rgEnvironment}}'
              apiName: '${{ variables.apiName}}'
              appSettings: '${{ parameters.appSettings }}'

      - job: deploy_api
        dependsOn: settings_api
        steps:
          - template: ../steps/api-deploy-steps.yml
            parameters:              
              artifactsPath: '${{ variables.artifactsPath}}'
              archiveFile: '${{ variables.archiveFile}}'
              apiName: '${{ variables.apiName}}'
              subscriptionId: '${{ variables.subscriptionId}}'
              subscriptionService: '${{ parameters.subscriptionService}}'